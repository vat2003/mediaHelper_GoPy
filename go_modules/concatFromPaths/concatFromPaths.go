// concat_from_paths.go
// Build: go build -o go_concatPaths.exe concat_from_paths.go
//
// C√°ch d√πng:
// 1) Truy·ªÅn tr·ª±c ti·∫øp ƒë∆∞·ªùng d·∫´n theo th·ª© t·ª± c·∫ßn gh√©p:
//    go_concatPaths.exe "<output_folder>" "E:\A.mp4" "E:\B.mp4" "E:\C.mp3"
//
// 2) Ho·∫∑c truy·ªÅn m·ªôt file danh s√°ch (.txt), m·ªói d√≤ng 1 path (c√≥ th·ªÉ k√®m d·∫•u "):
//    go_concatPaths.exe "<output_folder>" "E:\list.txt"
//
// Ghi ch√∫:
// - T·ª± t·∫°o <output_folder>\{timestamp}_output.<ext>
// - N·∫øu nhi·ªÅu ƒëu√¥i: ch·ªçn ƒëu√¥i ph·ªï bi·∫øn nh·∫•t; n·∫øu v·ª´a c√≥ video v·ª´a c√≥ audio ‚Üí .mp4
// - D√πng ffmpeg concat demuxer v·ªõi -c copy (kh√¥ng re-encode)

package main

import (
	"bufio"
	"errors"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
	"syscall"
	"time"

	"github.com/vat2003/mediaHelper_GoPy/go_modules/utils"
)

var videoExts = []string{".mp4", ".avi", ".mkv", ".mov", ".flv"}
var audioExts = []string{".mp3", ".wav", ".aac", ".flac", ".ogg", ".m4a"}
var mediaExts = append(videoExts, audioExts...)

func main() {
	if len(os.Args) < 3 {
		fmt.Println("Usage:")
		fmt.Println("  go_concatPaths.exe <output_folder> <path_or_list.txt> [<path2> <path3> ...]")
		return
	}

	outputFolder := os.Args[1]
	args := os.Args[2:]

	paths, err := resolveInputPaths(args)
	if err != nil {
		fmt.Println("‚ùå", err)
		return
	}
	if len(paths) == 0 {
		fmt.Println("‚ùå Kh√¥ng c√≥ ƒë∆∞·ªùng d·∫´n h·ª£p l·ªá ƒë·ªÉ gh√©p.")
		return
	}

	// L·ªçc gi·ªØ file h·ª£p l·ªá & l√† media
	var files []string
	for _, p := range paths {
		if fileExists(p) && isMediaFile(p) {
			files = append(files, p)
		}
	}
	if len(files) == 0 {
		fmt.Println("‚ùå Kh√¥ng c√≥ file media h·ª£p l·ªá.")
		return
	}

	if err := os.MkdirAll(outputFolder, os.ModePerm); err != nil {
		fmt.Println("‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c th∆∞ m·ª•c output:", err)
		return
	}

	if err := concatFromPaths(files, outputFolder); err != nil {
		fmt.Println("‚ùå L·ªói concat:", err)
	}
}

func resolveInputPaths(args []string) ([]string, error) {
	// N·∫øu ch·ªâ 1 tham s·ªë v√† l√† .txt ‚Üí ƒë·ªçc t·ª´ file
	if len(args) == 1 && strings.HasSuffix(strings.ToLower(args[0]), ".txt") {
		return readPathsFromFile(args[0])
	}
	// Ng∆∞·ª£c l·∫°i: coi m·ªçi arg l√† m·ªôt path
	cleaned := make([]string, 0, len(args))
	for _, p := range args {
		p = strings.TrimSpace(p)
		p = strings.Trim(p, "\"")
		if p != "" {
			cleaned = append(cleaned, p)
		}
	}
	return cleaned, nil
}

func readPathsFromFile(listPath string) ([]string, error) {
	f, err := os.Open(listPath)
	if err != nil {
		return nil, fmt.Errorf("kh√¥ng m·ªü ƒë∆∞·ª£c file danh s√°ch: %v", err)
	}
	defer f.Close()

	var paths []string
	sc := bufio.NewScanner(f)
	for sc.Scan() {
		line := strings.TrimSpace(sc.Text())
		line = strings.Trim(line, "\"") // b·ªè d·∫•u " n·∫øu c√≥
		if line == "" {
			continue
		}
		paths = append(paths, line)
	}
	if err := sc.Err(); err != nil {
		return nil, fmt.Errorf("l·ªói ƒë·ªçc file danh s√°ch: %v", err)
	}
	return paths, nil
}

func isMediaFile(path string) bool {
	ext := strings.ToLower(filepath.Ext(path))
	for _, e := range mediaExts {
		if ext == e {
			return true
		}
	}
	return false
}

func fileExists(path string) bool {
	st, err := os.Stat(path)
	return err == nil && !st.IsDir()
}

func concatFromPaths(files []string, outputFolder string) error {
	if len(files) == 0 {
		return errors.New("danh s√°ch file tr·ªëng")
	}

	ext := getOutputExtension(files)
	ts := time.Now().UnixNano()
	outputBase := fmt.Sprintf("%d_output", ts)
	outputPath := filepath.Join(outputFolder, outputBase+ext)
	tempListPath := filepath.Join(os.TempDir(), fmt.Sprintf("temp_list_%d.txt", ts))

	if err := createTempConcatList(files, tempListPath); err != nil {
		return fmt.Errorf("kh√¥ng th·ªÉ t·∫°o danh s√°ch t·∫°m: %w", err)
	}

	fmt.Println("üöÄ B·∫Øt ƒë·∫ßu gh√©p:", outputPath)
	if err := runFFmpegConcat(tempListPath, outputPath); err != nil {
		_ = os.Remove(tempListPath)
		return err
	}
	_ = os.Remove(tempListPath)

	fmt.Println("‚úÖ Ho√†n t·∫•t:", outputPath)
	return nil
}

func runFFmpegConcat(listPath, outputPath string) error {
	ffmpeg := utils.GetFFmpegPath()
	args := []string{
		"-hide_banner",
		"-fflags", "+genpts",
		"-f", "concat", "-safe", "0",
		"-i", listPath,
		"-c", "copy",
		"-y", outputPath,
	}

	cmd := exec.Command(ffmpeg, args...)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	// ·∫®n console tr√™n Windows
	if runtime.GOOS == "windows" {
		cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	}

	return cmd.Run()
}

func createTempConcatList(files []string, path string) error {
	f, err := os.Create(path)
	if err != nil {
		return err
	}
	defer f.Close()

	w := bufio.NewWriter(f)
	for _, file := range files {
		abs, err := filepath.Abs(file)
		if err != nil {
			return err
		}
		// Escape cho concat demuxer
		escaped := strings.ReplaceAll(abs, "\\", "\\\\")
		escaped = strings.ReplaceAll(escaped, "'", "'\\''")
		if _, err := w.WriteString(fmt.Sprintf("file '%s'\n", escaped)); err != nil {
			return err
		}
	}
	return w.Flush()
}

func getOutputExtension(files []string) string {
	extCount := make(map[string]int)
	hasVideo, hasAudio := false, false

	for _, file := range files {
		ext := strings.ToLower(filepath.Ext(file))
		extCount[ext]++
		if contains(videoExts, ext) {
			hasVideo = true
		}
		if contains(audioExts, ext) {
			hasAudio = true
		}
	}

	// N·∫øu t·∫•t c·∫£ c√πng ƒëu√¥i ‚Üí d√πng lu√¥n
	if len(extCount) == 1 {
		for e := range extCount {
			return e
		}
	}

	// Ch·ªçn ƒëu√¥i ph·ªï bi·∫øn
	maxCount := 0
	chosen := ".mp4"
	for e, c := range extCount {
		if c > maxCount {
			maxCount = c
			chosen = e
		}
	}
	// N·∫øu c√≥ c·∫£ video & audio ‚Üí .mp4
	if hasVideo && hasAudio {
		return ".mp4"
	}
	return chosen
}

func contains(slice []string, s string) bool {
	for _, e := range slice {
		if s == e {
			return true
		}
	}
	return false
}
