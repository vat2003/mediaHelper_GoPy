// go_modules/convert/convert.go
package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"syscall"

	"github.com/vat2003/mediaHelper_GoPy/go_modules/utils"
)

func main() {
	if len(os.Args) < 3 {
		fmt.Println("Thi·∫øu tham s·ªë: input_file output_file")
		os.Exit(1)
	}

	inputFile := os.Args[1]
	outputFile := os.Args[2]
	// N·∫øu output c√≥ d·∫°ng ...".flv-xxx", th√¨ ƒë·ªïi th√†nh "...-xxx.flv"
	if strings.Contains(outputFile, ".flv-") {
		parts := strings.Split(outputFile, ".flv-")
		outputFile = parts[0] + "-" + parts[1] + ".flv"
	}
	ffmpeg := utils.GetFFmpegPath()

	ext := strings.ToLower(filepath.Ext(outputFile))

	var args []string
	switch ext {
	case ".mov":
		// B∆∞·ªõc 1: th·ª≠ remux nhanh (copy)
		args = []string{
			"-hide_banner", "-y", "-i", inputFile,
			"-map", "0:v:0", "-map", "0:a?", "-map", "-0:d",
			"-c", "copy",
			outputFile,
		}

		// Ch·∫°y th·ª≠ remux
		cmd := exec.Command(ffmpeg, args...)
		cmd.Stdout = os.Stdout
		cmd.Stderr = os.Stderr
		cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}

		if err := cmd.Run(); err != nil {
			fmt.Println("‚ö†Ô∏è Remux th·∫•t b·∫°i ‚Üí fallback sang encode...")

			// B∆∞·ªõc 2: fallback encode (NVENC)
			args = []string{
				"-hide_banner", "-y", "-i", inputFile,
				"-map", "0:v:0", "-map", "0:a?", "-map", "-0:d",

				// Video NVENC
				"-c:v", "h264_nvenc",
				"-preset", "p4",
				"-profile:v", "high",
				"-level", "5.1",
				"-vf", "format=yuv420p",

				// Rate control
				"-rc", "vbr",
				"-cq", "23",
				"-b:v", "0",

				// Audio
				"-c:a", "aac",
				"-b:a", "192k",
				"-ar", "48000",
				"-ac", "2",

				// MOV container
				outputFile,
			}

			cmd = exec.Command(ffmpeg, args...)
			cmd.Stdout = os.Stdout
			cmd.Stderr = os.Stderr
			cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}

			if err := cmd.Run(); err != nil {
				fmt.Println("‚ùå Encode MOV th·∫•t b·∫°i:", err)
				os.Exit(2)
			}
		}

	case ".mp4":
		args = []string{
			"-hide_banner", "-y", "-i", inputFile,
			"-map", "0:v:0", "-map", "0:a?", "-map", "-0:d",

			// Video: NVENC + ch·∫•t l∆∞·ª£ng c·ªë ƒë·ªãnh
			"-vf", "format=yuv420p", //Chuy·ªÉn m√†u v·ªÅ YUV 4:2:0 (chu·∫©n b·∫Øt bu·ªôc ƒë·ªÉ t∆∞∆°ng th√≠ch h·∫ßu h·∫øt player, YouTube/Facebook).
			"-c:v", "h264_nvenc",
			"-preset", "p4", //p1 nhanh nh·∫•t, p7 ch·∫≠m nh∆∞ng ch·∫•t l∆∞·ª£ng cao h∆°n
			"-profile:v", "high", //Profile H.264, h·ªó tr·ª£ 8-bit 4:2:0, c·∫ßn thi·∫øt cho streaming.
			"-level", "5.1", //Cho ph√©p x·ª≠ l√Ω video 4K ƒë·∫øn ~30fps.

			// Rate control: ch·∫•t l∆∞·ª£ng c·ªë ƒë·ªãnh (CQ)
			"-rc", "vbr",
			"-cq", "23", // 15‚Äì23, s·ªë c√†ng th·∫•p c√†ng ƒë·∫πp
			"-b:v", "0", // ƒë·ªÉ ffmpeg t·ª± ch·ªçn bitrate ph√π h·ª£p

			// Audio
			"-c:a", "aac",
			"-b:a", "132k",
			"-ar", "48000",
			"-ac", "2",

			// MP4 t·ªëi ∆∞u streaming
			"-movflags", "+faststart",

			outputFile,
		}

	case ".flv-fullhd-24":
		args = []string{
			"-hide_banner", "-y", "-i", inputFile,
			"-map", "0:v:0", "-map", "0:a?", "-map", "-0:d",

			"-vf", "format=yuv420p",
			"-c:v", "h264_nvenc",
			"-preset", "p2",
			"-profile:v", "high",
			"-level", "4.1",

			"-rc", "cbr",
			"-b:v", "4500k",
			"-maxrate", "4500k",
			"-bufsize", "9000k",
			"-g", "48",

			"-c:a", "aac",
			"-b:a", "160k",
			"-ar", "48000",
			"-ac", "2",

			"-f", "flv", outputFile,
		}

	case ".flv-4k-24":
		args = []string{
			"-hide_banner", "-y", "-i", inputFile,
			"-map", "0:v:0", "-map", "0:a?", "-map", "-0:d",

			"-vf", "format=yuv420p",
			"-c:v", "h264_nvenc",
			"-preset", "p2",
			"-profile:v", "high",
			"-level", "5.1",

			"-rc", "cbr",
			"-b:v", "15000k",
			"-maxrate", "15000k",
			"-bufsize", "30000k",
			"-g", "48",

			"-c:a", "aac",
			"-b:a", "160k",
			"-ar", "48000",
			"-ac", "2",

			"-f", "flv", outputFile,
		}

	case ".flv-4k-30":
		args = []string{
			"-hide_banner", "-y", "-i", inputFile,
			"-map", "0:v:0", "-map", "0:a?", "-map", "-0:d",

			"-vf", "format=yuv420p",
			"-c:v", "h264_nvenc",
			"-preset", "p2",
			"-profile:v", "high",
			"-level", "5.1",

			"-rc", "cbr",
			"-b:v", "18000k",
			"-maxrate", "18000k",
			"-bufsize", "36000k",
			"-g", "60",

			"-c:a", "aac",
			"-b:a", "160k",
			"-ar", "48000",
			"-ac", "2",

			"-f", "flv", outputFile,
		}

	case ".flv-4k-60":
		args = []string{
			"-hide_banner", "-y", "-i", inputFile,
			"-map", "0:v:0", "-map", "0:a?", "-map", "-0:d",

			"-vf", "format=yuv420p",
			"-c:v", "h264_nvenc",
			"-preset", "p2",
			"-profile:v", "high",
			"-level", "5.2",

			"-rc", "cbr",
			"-b:v", "25000k",
			"-maxrate", "25000k",
			"-bufsize", "50000k",
			"-g", "120",

			"-c:a", "aac",
			"-b:a", "160k",
			"-ar", "48000",
			"-ac", "2",

			"-f", "flv", outputFile,
		}

	default:
		// ƒê√≠ch l·∫° ‚Üí transcode ph·ªï th√¥ng
		args = []string{
			"-hide_banner", "-y", "-i", inputFile,
			"-map", "0:v:0", "-map", "0:a?",
			"-c:v", "h264_nvenc", "-preset", "p2",
			"-c:a", "aac", "-b:a", "192k",
			outputFile,
		}
	}

	fmt.Printf("üîÑ Convert: %s --> %s\n", inputFile, outputFile)

	cmd := exec.Command(ffmpeg, args...)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}

	if err := cmd.Run(); err != nil {
		fmt.Println("‚ùå L·ªói Convert:", err)
		os.Exit(2)
	}

	fmt.Println("‚úÖ Successfully:", outputFile)
}
