package main

import (
	"fmt"
	"go_modules/utils"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"
	"syscall"
)

func main() {
	if len(os.Args) < 5 {
		fmt.Println("Usage: go run loop_media.go <input_file> <output_file> <loop_count_or_minutes> <mode: count|duration>")
		return
	}

	inputFile := os.Args[1]
	outputFile := os.Args[2]
	loopParam := os.Args[3]
	mode := os.Args[4] // "count" or "duration"
	ffmpeg := utils.GetFFmpegPath()
	ffprobe := utils.GetFFprobePath()

	// Create temp concat list file
	concatList := "concat_list.txt"
	inputAbs, _ := filepath.Abs(inputFile)

	var loopCount int
	var err error

	switch mode {
	case "count":
		loopCount, err = strconv.Atoi(loopParam)
		if err != nil || loopCount <= 0 {
			fmt.Println("Loop count ph·∫£i l√† s·ªë nguy√™n > 0")
			return
		}
	case "duration":
		// L·∫•y duration c·ªßa file input b·∫±ng ffprobe
		cmd := exec.Command(ffprobe, "-v", "error", "-show_entries", "format=duration",
			"-of", "default=noprint_wrappers=1:nokey=1", inputFile)
		out, err := cmd.Output()
		// ·∫®n console window (ch·ªâ c√≥ t√°c d·ª•ng tr√™n Windows)
		cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
		if err != nil {
			fmt.Println("Kh√¥ng th·ªÉ l·∫•y th·ªùi l∆∞·ª£ng file:", err)
			return
		}

		durationSec, _ := strconv.ParseFloat(strings.TrimSpace(string(out)), 64)

		minutes, err := strconv.ParseFloat(loopParam, 64)
		if err != nil || minutes <= 0 {
			fmt.Println("S·ªë ph√∫t ph·∫£i > 0")
			return
		}

		targetSeconds := minutes * 60
		loopCount = 1
		totalDuration := durationSec

		for totalDuration < targetSeconds {
			loopCount++
			totalDuration += durationSec
		}
		fmt.Printf("‚è± File g·ªëc d√†i %.1f gi√¢y ‚ûú L·∫∑p %d l·∫ßn ƒë·ªÉ ƒë·∫°t ‚â• %.0f ph√∫t (%.1f gi√¢y)\n",
			durationSec, loopCount, minutes, totalDuration)

	default:
		fmt.Println("Ch·∫ø ƒë·ªô ph·∫£i l√† 'count' ho·∫∑c 'duration'")
		return
	}

	// Ghi danh s√°ch concat v√†o file t·∫°m
	f, err := os.Create(concatList)
	if err != nil {
		fmt.Println("‚ùå Error creating concat list file:", err)
		return
	}
	defer os.Remove(concatList) // X√≥a file t·∫°m sau khi ho√†n th√†nh
	defer f.Close()

	for i := 0; i < loopCount; i++ {
		f.WriteString(fmt.Sprintf("file '%s'\n", inputAbs))
	}

	// G·ªçi ffmpeg ƒë·ªÉ n·ªëi c√°c file
	cmd := exec.Command(ffmpeg, "-y", "-f", "concat", "-safe", "0", "-i", concatList, "-c", "copy", outputFile)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	// ·∫®n console window (ch·ªâ c√≥ t√°c d·ª•ng tr√™n Windows)
	cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	fmt.Println("FFmpeg cmd:", strings.Join(cmd.Args, " "))

	fmt.Println("üöÄ ƒêang t·∫°o file l·∫∑p...")
	err = cmd.Run()
	if err != nil {
		fmt.Println("‚ùå L·ªói ffmpeg:", err)
		return
	}
	fmt.Println("‚úÖ Ho√†n t·∫•t:", outputFile)
}
