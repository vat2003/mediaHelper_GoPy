package main

import (
	"fmt"
	"go_modules/utils"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"
	"syscall"
)

func getDuration(input string) (float64, error) {
	ffprobe := utils.GetFFprobePath()
	cmd := exec.Command(ffprobe, "-v", "error", "-show_entries", "format=duration",
		"-of", "default=noprint_wrappers=1:nokey=1", input)
	output, err := cmd.Output()
	if err != nil {
		return 0, err
	}
	durationStr := strings.TrimSpace(string(output))
	return strconv.ParseFloat(durationStr, 64)
}
func main() {
	if len(os.Args) < 7 {
		fmt.Println("Usage: go run mergeMedia.go <input_video_or_image> <input_audio> <output_file> <resolution> <cpu|gpu> <output_duration_seconds> [bitrate] [fps (0 = default)]")
		return
	}

	inputVideoImage := os.Args[1]
	inputAudio := os.Args[2]
	outputFile := os.Args[3]
	resolution := os.Args[4]
	processor := os.Args[5]
	outputDurationStr := os.Args[6]
	ffmpeg := utils.GetFFmpegPath()

	// L·∫•y bitrate m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng truy·ªÅn
	bitrate := "1500k"
	if len(os.Args) >= 8 && os.Args[7] != "" {
		bitrate = os.Args[7]
	}

	// L·∫•y fps m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng truy·ªÅn
	fps := 0
	if len(os.Args) >= 9 && os.Args[8] != "" {
		var err error
		fps, err = strconv.Atoi(os.Args[8])
		if err != nil || fps < 0 {
			log.Fatalf("‚ùå FPS kh√¥ng h·ª£p l·ªá: %s", os.Args[8])
		}
	}

	// Parse output duration
	outputDuration, err := strconv.ParseFloat(outputDurationStr, 64)
	if err != nil || outputDuration < 0 {
		log.Fatalf("‚ùå Output duration kh√¥ng h·ª£p l·ªá: %s", outputDurationStr)
	}

	// N·∫øu kh√¥ng nh·∫≠p th·ªùi l∆∞·ª£ng ‚Üí d√πng audio g·ªëc
	if outputDuration == 0 {
		fmt.Println("üîç ƒêang l·∫•y duration c·ªßa audio...")
		outputDuration, err = getDuration(inputAudio)
		if err != nil {
			log.Fatalf("‚ùå L·ªói khi l·∫•y duration c·ªßa audio: %v", err)
		}
		fmt.Printf("‚è±Ô∏è Duration c·ªßa audio: %.2f gi√¢y\n", outputDuration)
	}

	// Ki·ªÉm tra input l√† ·∫£nh hay video
	ext := strings.ToLower(filepath.Ext(inputVideoImage))
	isImage := ext == ".jpg" || ext == ".jpeg" || ext == ".png" || ext == ".bmp" || ext == ".webp"

	// T·∫°o filter scale
	var scaleFilter string
	if fps > 0 {
		scaleFilter = fmt.Sprintf("fps=%d,scale=%s,format=yuv420p", fps, resolution)
	} else {
		fmt.Println("‚ö†Ô∏è FPS kh√¥ng ƒë∆∞·ª£c ƒë·∫∑t, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh c·ªßa FFmpeg.")
		scaleFilter = fmt.Sprintf("scale=%s,format=yuv420p", resolution)
	}

	var ffmpegArgs []string

	if isImage {
		// V·ªõi ·∫£nh: l·∫∑p ·∫£nh -> t·∫°o video
		ffmpegArgs = []string{
			"-loop", "1",
			"-i", inputVideoImage,
			"-stream_loop", "-1",
			"-i", inputAudio,
			"-t", fmt.Sprintf("%.2f", outputDuration),
			"-vf", scaleFilter,
			"-c:v", "libx264",
			"-preset", "ultrafast",
			"-b:v", bitrate,
			"-c:a", "aac",
			"-shortest",
			outputFile,
		}
	} else {
		// V·ªõi video: l·∫∑p video, lo·∫°i b·ªè audio g·ªëc
		ffmpegArgs = []string{
			"-stream_loop", "-1",
			"-i", inputVideoImage,
			"-stream_loop", "-1",
			"-i", inputAudio,
			"-t", fmt.Sprintf("%.2f", outputDuration),
			"-vf", scaleFilter,
			"-map", "0:v:0", // ch·ªâ l·∫•y video t·ª´ input 0
			"-map", "1:a:0", // ch·ªâ l·∫•y audio t·ª´ input 1
			"-c:v", "libx264",
			"-preset", "fast",
			"-b:v", bitrate,
			"-c:a", "aac",
			"-shortest",
			outputFile,
		}
	}

	// N·∫øu d√πng GPU
	if processor == "gpu" {
		for i := range ffmpegArgs {
			if ffmpegArgs[i] == "libx264" {
				ffmpegArgs[i] = "h264_nvenc"
			}
		}
	}

	cmd := exec.Command(ffmpeg, append([]string{"-y"}, ffmpegArgs...)...)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	// ·∫®n console window (ch·ªâ c√≥ t√°c d·ª•ng tr√™n Windows)
	cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}

	fmt.Println("üöÄ Gh√©p video/audio...")
	fmt.Println("FFmpeg command:", strings.Join(cmd.Args, " "))

	if err := cmd.Run(); err != nil {
		fmt.Println("‚ùå L·ªói khi ch·∫°y ffmpeg:", err)
		return
	}

	fmt.Println("‚úÖ Th√†nh c√¥ng:", outputFile)
}
